{"version":3,"sources":["TableData.js","Table.js","sudokuBoards.js","BoardMaker.js","gridCheckerLogic.js","App.js","serviceWorker.js","index.js"],"names":["TableData","cellData","cellIdx","rowIdx","colors","setGrid","grid","className","value","onChange","e","newRow","Number","target","newGrid","Table","useEffect","id","idArr","split","map","row","key","cell","sudokuBoards","BoardMaker","showButtons","setShowButtons","clickHandler","level","difficulty","Math","floor","random","fullBoard","sudo","length","sudokuString","board","i","slice","push","num","sudoStringHandler","finalBoard","x","y","boardMaker","console","log","align","href","onClick","getRow","getColumn","columnIdx","column","numFromCol","flat","getSection","rowX","section","yIdx","startRow","currRow","includes1to9","subSection","includes","noDupeSection","hash","item","undefined","j","currSection","boardDuplicateChecker","defaultGrid","App","useState","validGrid","setValidGrid","showResults","setShowResults","currCol","sudokuChecker","setTimeout","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b877015.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TableData = ({ cellData, cellIdx, rowIdx, colors, setGrid, grid }) => {\r\n  const changeHandler = (e) => {\r\n    let newRow = [...grid[rowIdx]];\r\n    newRow[cellIdx] = Number(e.target.value);\r\n    let newGrid = [...grid];\r\n    newGrid[rowIdx] = newRow;\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  return (\r\n    <td className={colors(`${rowIdx}-${cellIdx}`)}>\r\n      <input\r\n        className={colors(`${rowIdx}-${cellIdx}`)}\r\n        value={cellData}\r\n        onChange={changeHandler}\r\n      />\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default TableData;\r\n","import React, { useEffect } from 'react';\r\nimport TableData from './TableData';\r\nconst Table = ({ grid, setGrid }) => {\r\n  useEffect(() => {\r\n    setGrid(grid);\r\n  }, [grid, setGrid]);\r\n\r\n  const colors = (id) => {\r\n    const idArr = id.split('-');\r\n\r\n    ///preserving in separate sections for now in case i need more granular control\r\n    if (idArr[0] < 3 && idArr[1] < 3) return 'section-1';\r\n    if (idArr[0] < 3 && idArr[1] < 6) return 'section-2';\r\n    if (idArr[0] < 3 && idArr[1] < 9) return 'section-3';\r\n    if (idArr[0] < 6 && idArr[1] < 3) return 'section-4';\r\n    if (idArr[0] < 6 && idArr[1] < 6) return 'section-5';\r\n    if (idArr[0] < 6 && idArr[1] < 9) return 'section-6';\r\n    if (idArr[0] < 9 && idArr[1] < 3) return 'section-7';\r\n    if (idArr[0] < 9 && idArr[1] < 6) return 'section-8';\r\n    if (idArr[0] < 9 && idArr[1] < 9) return 'section-9';\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <table className='tg table-wrap'>\r\n        {grid.map((row, rowIdx) => {\r\n          return (\r\n            <tbody key={rowIdx}>\r\n              {rowIdx >= 0 && rowIdx < 3 && (\r\n                <tr>\r\n                  {row.map((cell, cellIdx) => (\r\n                    <TableData\r\n                      key={`${rowIdx}-${cellIdx}`}\r\n                      cellData={cell}\r\n                      cellIdx={cellIdx}\r\n                      rowIdx={rowIdx}\r\n                      colors={colors}\r\n                      setGrid={setGrid}\r\n                      grid={grid}\r\n                    />\r\n                  ))}\r\n                </tr>\r\n              )}\r\n              {rowIdx >= 3 && rowIdx < 6 && (\r\n                <tr>\r\n                  {row.map((cell, cellIdx) => (\r\n                    <TableData\r\n                      key={`${rowIdx}-${cellIdx}`}\r\n                      cellData={cell}\r\n                      cellIdx={cellIdx}\r\n                      rowIdx={rowIdx}\r\n                      colors={colors}\r\n                      setGrid={setGrid}\r\n                      grid={grid}\r\n                    />\r\n                  ))}\r\n                </tr>\r\n              )}\r\n              {rowIdx >= 6 && rowIdx < 9 && (\r\n                <tr>\r\n                  {row.map((cell, cellIdx) => (\r\n                    <TableData\r\n                      key={`${rowIdx}-${cellIdx}`}\r\n                      cellData={cell}\r\n                      cellIdx={cellIdx}\r\n                      rowIdx={rowIdx}\r\n                      colors={colors}\r\n                      setGrid={setGrid}\r\n                      grid={grid}\r\n                    />\r\n                  ))}\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          );\r\n        })}\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","export const sudokuBoards = [\r\n  '864371259325849761971265843436192587198657432257483916689734125713528694542916378',\r\n  '346179258187523964529648371965832417472916835813754629798261543631485792254397186',\r\n  '695127384138459672724836915851264739273981546946573821317692458489715263562348197',\r\n  '497258316186439725253716498629381547375964182841572639962145873718623954534897261',\r\n  '465912378189473562327568149738645291954821637216397854573284916642159783891736425',\r\n  '194685237382974516657213489823491675541768923769352841215839764436527198978146352',\r\n  '289765431317924856645138729763891542521473968894652173432519687956387214178246395',\r\n  '894231657762495183351876942583624719219387564647159328128763495976542831435918276',\r\n  '563472198219386754847195623472638519951247386638519472795864231324951867186723945',\r\n  '163725948584693271729184365946358127371462589852917634498231756637549812215876493',\r\n  '974183652651274389283596714129835476746912538835647921568329147317468295492751863',\r\n  '431567289729481653865329174986243517257198346143756892612975438374812965598634721',\r\n  '254367891893215674716984253532698147178432569649571328421753986365849712987126435',\r\n  '958274163123698754746153928674315289532789416819462375285941637397526841461837592',\r\n  '865379412924581376713642895397164528482795631156823947541236789679418253238957164',\r\n  '865714329917362845234598761142657983783941256596283174358176492429835617671429538',\r\n  '268495317194673852735128964872549631651387249943216785326951478589764123417832596',\r\n  '947812563583764192261935478156349287879621354324587619698253741712496835435178926',\r\n  '652483917978162435314975628825736149791824563436519872269348751547291386183657294',\r\n  '712984365346751829589263471624179538853642917197538642978316254461825793235497186',\r\n  '967254318184379562253186947691748235835621794742593681376415829428967153519832476',\r\n  '251479638948316752637258194365124879712983465894567213423691587179845326586732941',\r\n  '256734198891265374347198652514683729728519436963427581135942867689371245472856913',\r\n  '964532178187694235235817964629451783573986412841273596416728359352169847798345621',\r\n  '142569873385217946967438251536871429219654387478923165893746512621385794754192638',\r\n];\r\n","import React from 'react';\r\nimport { sudokuBoards } from './sudokuBoards.js';\r\nconst BoardMaker = ({ setGrid, showButtons, setShowButtons }) => {\r\n  //FUNCTION TO TAKE IN STRINGS OF VALID SUDOKU BOARDS AND MAKE GRIDS\r\n  let sudoStringHandler = (sudo) => {\r\n    let random = Math.floor(Math.random() * sudokuBoards.length);\r\n    let sudokuString = sudokuBoards[random];\r\n    let board = [];\r\n    for (let i = 0; i < 81; i += 9) {\r\n      let row = sudokuString.slice(i, i + 9).split('');\r\n      board.push(row.map((num) => Number(num)));\r\n    }\r\n    return board;\r\n  };\r\n  //FUNCTION TO GENERATE NUMBERS BASED ON DIFFICULTY\r\n  const difficultySetting = (level) => {\r\n    if (level === 'easy') level = 36;\r\n    if (level === 'medium') level = Math.floor(Math.random() * (33 - 27)) + 26;\r\n    if (level === 'hard') level = Math.floor(Math.random() * (25 - 20)) + 19;\r\n    if (level === 'full') level = 81;\r\n    return level;\r\n  };\r\n\r\n  //FUNCTION TO EMPTY A NUMBER OF INDICES ACCORDING TO LEVEL\r\n  let boardMaker = (board, num) => {\r\n    const numGen = () => {\r\n      let x = Math.floor(Math.random() * 9);\r\n      let y = Math.floor(Math.random() * 9);\r\n      return [x, y];\r\n    };\r\n\r\n    let removeNum = 81 - num;\r\n    let i = removeNum - 1;\r\n    while (i >= 0) {\r\n      let [x, y] = numGen();\r\n      if (board[x][y] === '') {\r\n        continue;\r\n      }\r\n      board[x][y] = '';\r\n      i--;\r\n    }\r\n    return board;\r\n  };\r\n  const clickHandler = (e) => {\r\n    let difficulty = difficultySetting(e.target.value);\r\n    let fullBoard = sudoStringHandler();\r\n    let finalBoard = boardMaker(fullBoard, difficulty);\r\n    setGrid(finalBoard);\r\n    setShowButtons(!showButtons);\r\n    console.log(fullBoard);\r\n  };\r\n\r\n  return (\r\n    <div align='center'>\r\n      <button\r\n        className='semi-trans'\r\n        value='easy'\r\n        href='!#'\r\n        onClick={clickHandler}>\r\n        Easy\r\n      </button>\r\n      <button\r\n        className='semi-trans'\r\n        value='medium'\r\n        href='!#'\r\n        onClick={clickHandler}>\r\n        Medium\r\n      </button>\r\n      <button\r\n        className='semi-trans'\r\n        value='hard'\r\n        href='!#'\r\n        onClick={clickHandler}>\r\n        Hard\r\n      </button>\r\n      <button\r\n        className='semi-trans'\r\n        value='full'\r\n        href='!#'\r\n        onClick={clickHandler}>\r\n        Full Board\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardMaker;\r\n","// eslint-disable-next-line\r\nlet validSection = [8, 9, 5, 7, 4, 2, 1, 3, 6];\r\n// eslint-disable-next-line\r\nlet invalidSection = [8, 9, 5, 7, 4, 2, 1, 3, 1];\r\n// eslint-disable-next-line\r\nlet invalidSection2 = ['', 9, 5, '', 4, 2, 1, 3, 1];\r\n// eslint-disable-next-line\r\nlet puzzle = [\r\n  [8, 9, 5, 7, 4, 2, 1, 3, 6],\r\n  [2, 7, 1, 9, 6, 3, 4, 8, 5],\r\n  [4, 6, 3, 5, 8, 1, 7, 9, 2],\r\n\r\n  [9, 3, 4, 6, 1, 7, 2, 5, 8],\r\n  [5, 1, 7, 2, 3, 8, 9, 6, 4],\r\n  [6, 8, 2, 4, 5, 9, 3, 7, 1],\r\n\r\n  [1, 5, 9, 8, 7, 4, 6, 2, 3],\r\n  [7, 4, 6, 3, 2, 5, 8, 1, 9],\r\n  [3, 2, 8, 1, 9, 6, 5, 4, 7],\r\n];\r\n// eslint-disable-next-line\r\nlet puzzleClone = [\r\n  ['', 2, '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', 1, '', '', '', '', '', '', ''],\r\n];\r\n// eslint-disable-next-line\r\nlet invalidPuzzle = [\r\n  [8, 9, 5, 7, 4, 2, 1, 3, 6],\r\n  [8, 7, 1, 9, 6, 3, 4, 8, 5],\r\n  [4, 6, 3, 5, 8, 1, 7, 9, 2],\r\n  [9, 3, 4, 6, 1, 7, 2, 5, 8],\r\n  [5, 1, 7, 2, 3, 8, 9, 6, 4],\r\n  [6, 8, 2, 4, 5, 9, 3, 7, 1],\r\n  [1, 5, 9, 8, 7, 4, 6, 2, 3],\r\n  [7, 4, 6, 3, 2, 5, 8, 1, 9],\r\n  [3, 2, 8, 1, 9, 6, 5, 4, 7],\r\n];\r\n\r\nexport const getRow = (grid, rowIdx) => {\r\n  return grid[rowIdx];\r\n};\r\nconst getColumn = (grid, columnIdx) => {\r\n  let column = [];\r\n  for (let i = 0; i < grid.length; i++) {\r\n    let currRow = grid[i];\r\n\r\n    let numFromCol = currRow[columnIdx];\r\n\r\n    column.push(numFromCol);\r\n  }\r\n  return column.flat();\r\n};\r\nexport const getSection = (grid, column, rowX) => {\r\n  //most annoying, worked for 0,0 originally so made sudokuChecker, couldnt figure out why it only worked  at location 0,0, problem was start row was not being incremented with startIdx\r\n  let section = [];\r\n  let yIdx = 0;\r\n  let startRow = 0;\r\n  //check coord for where to start slicing\r\n  if (column === 0) yIdx = 0;\r\n  if (column === 1) yIdx = 3;\r\n  if (column === 2) yIdx = 6;\r\n  //finding that i needed to make rowX increment\r\n  if (rowX === 0) startRow = 0;\r\n  if (rowX === 1) startRow = 3;\r\n  if (rowX === 2) startRow = 6;\r\n\r\n  for (let i = startRow; i < startRow + 3; i++) {\r\n    let currRow = grid[i];\r\n    section.push(currRow[yIdx], currRow[yIdx + 1], currRow[yIdx + 2]);\r\n  }\r\n  return section;\r\n};\r\nexport const includes1to9 = (subSection) => {\r\n  for (let i = 1; i < 9; i++) {\r\n    if (!subSection.includes(i)) return false;\r\n  }\r\n  return true;\r\n};\r\n//CHECK IF A SECTION CONTAINS MORE THAN ONE OF A NUMBER\r\nexport const noDupeSection = (subSection) => {\r\n  let hash = {};\r\n  for (let item of subSection) {\r\n    if (item !== '') {\r\n      if (hash[item] === undefined) {\r\n        hash[item] = 1;\r\n      } else {\r\n        hash[item] += 1;\r\n      }\r\n      for (let key in hash) {\r\n        if (hash[key] > 1) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\nexport const boardDuplicateChecker = (grid) => {\r\n  for (let i = 0; i < grid.length; i++) {\r\n    if (!noDupeSection(getRow(grid, i))) return false;\r\n    if (!noDupeSection(getColumn(grid, i))) return false;\r\n  }\r\n  //Double for loop to get through 1 - 3 on both input coords\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let currSection = getSection(grid, i, j);\r\n      if (!noDupeSection(currSection)) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n//CHECK WHOLE BOARD IS VALID\r\nexport const sudokuChecker = (grid) => {\r\n  for (let i = 0; i < grid.length; i++) {\r\n    let currCol = getColumn(grid, i);\r\n\r\n    if (!includes1to9(currCol)) {\r\n      return false;\r\n    }\r\n\r\n    let currRow = getRow(grid, i);\r\n    if (!includes1to9(currRow)) {\r\n      return false;\r\n    }\r\n  }\r\n  //Double for loop to get through 1 - 3 on both input coords\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let currSection = getSection(grid, i, j);\r\n      if (!includes1to9(currSection)) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n//CHECK EQUIVALENCY OF TWO BOARDS\r\nexport const isSame = (grid1, grid2) => {\r\n  //Double For Loop check each entry against the other\r\n  for (let i = 0; i < grid1.length; i++) {\r\n    let currRow = grid1[i];\r\n    let currRow2 = grid2[i];\r\n    for (let j = 0; j < grid1.length; j++) {\r\n      if (currRow[j] !== currRow2[j]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconsole.log(boardDuplicateChecker(puzzleClone));\r\n","import React, { useState, useEffect } from 'react';\nimport Table from './Table';\n// import GridChecker from './GridChecker';\nimport BoardMaker from './BoardMaker';\nimport './App.css';\nimport { sudokuChecker } from './gridCheckerLogic';\n// eslint-disable-next-line\nconst defaultGrid = [\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n];\n//eslint-disable-next-line\nlet puzzle = [\n  [8, 9, 5, 7, 4, 2, 1, 3, 6],\n  [2, 7, 1, 9, 6, 3, 4, 8, 5],\n  [4, 6, 3, 5, 8, 1, 7, 9, 2],\n  [9, 3, 4, 6, 1, 7, 2, 5, 8],\n  [5, 1, 7, 2, 3, 8, 9, 6, 4],\n  [6, 8, 2, 4, 5, 9, 3, 7, 1],\n  [1, 5, 9, 8, 7, 4, 6, 2, 3],\n  [7, 4, 6, 3, 2, 5, 8, 1, 9],\n  [3, 2, 8, 1, 9, 6, 5, 4, 7],\n];\n\nfunction App() {\n  const [grid, setGrid] = useState(defaultGrid);\n  const [validGrid, setValidGrid] = useState(false);\n  const [showResults, setShowResults] = useState(null);\n  const [showButtons, setShowButtons] = useState(true);\n  useEffect(() => {\n    setValidGrid(sudokuChecker(grid));\n  }, [grid]);\n\n  const checkBoardClickHandler = () => {\n    setShowResults(!showResults);\n    if (!validGrid) {\n      setTimeout(() => {\n        setShowResults(false);\n      }, 2500);\n    }\n  };\n  const newBoardClickHandler = () => {\n    setGrid(defaultGrid);\n    setShowButtons(!showButtons);\n    setShowResults(false);\n  };\n  return (\n    <div className='app'>\n      {!showResults && <h3 className='app-header'>Sudoku?</h3>}{' '}\n      {showResults && validGrid && <h4 className='results'>Valid Grid!</h4>}\n      {showResults && !validGrid && <h4 className='results'>Failure!</h4>}\n      <Table grid={grid} setGrid={setGrid} />\n      {showButtons ? (\n        <BoardMaker\n          setGrid={setGrid}\n          showButtons={showButtons}\n          setShowButtons={setShowButtons}\n        />\n      ) : (\n        <>\n          <div align='center'>\n            <button className='semi-trans' onClick={checkBoardClickHandler}>\n              Check Board\n            </button>\n            <button className='semi-trans' onClick={newBoardClickHandler}>\n              New Game\n            </button>\n          </div>\n        </>\n      )}\n      {/* For Future Reference */}\n      {/* <GridChecker\n        grid={grid}\n        setGrid={setGrid}\n        puzzle={puzzle}\n        validGrid={validGrid}\n        setValidGrid={setValidGrid}\n      /> */}\n      <img src='src\\assets\\sudoku-logo.png' alt='' />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}