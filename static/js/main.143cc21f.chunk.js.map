{"version":3,"sources":["TableData.js","Table.js","sudokuBoards.js","gridCheckerLogic.js","BoardMaker.js","App.js","serviceWorker.js","index.js"],"names":["TableData","cellData","cellIdx","rowIdx","colors","setGrid","grid","boardCopy","inputEl","useRef","useEffect","current","disabled","className","value","onChange","e","newRow","Number","target","newGrid","ref","Table","id","idArr","split","map","row","key","cell","sudokuBoards","getRow","getColumn","columnIdx","column","i","length","numFromCol","push","flat","getSection","rowX","section","yIdx","startRow","currRow","includes1to9","subSection","includes","BoardMaker","showButtons","setShowButtons","setBoardCopy","clickHandler","level","difficulty","Math","floor","random","finalBoard","board","x","y","boardMaker","sudo","sudokuString","slice","num","sudoStringHandler","startingBoardCopy","copy","j","boardCopier","align","href","onClick","defaultGrid","App","useState","validGrid","setValidGrid","showResults","setShowResults","currCol","currSection","sudokuChecker","setTimeout","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.143cc21f.chunk.js","sourcesContent":["// eslint-disable-next-line\r\nimport React, { useRef, useEffect, useLayoutEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst TableData = ({\r\n  cellData,\r\n  cellIdx,\r\n  rowIdx,\r\n  colors,\r\n  setGrid,\r\n  grid,\r\n  boardCopy,\r\n}) => {\r\n  const inputEl = useRef(null)\r\n  // console.log(boardCopy\r\n  useEffect(() => {\r\n    if (boardCopy && typeof boardCopy[rowIdx][cellIdx] === 'number') {\r\n      inputEl.current.disabled = true\r\n    } else if (boardCopy !== null) {\r\n      inputEl.current.disabled = false\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [boardCopy])\r\n\r\n  const changeHandler = (e) => {\r\n    let newRow = [...grid[rowIdx]]\r\n    newRow[cellIdx] = Number(e.target.value)\r\n    let newGrid = [...grid]\r\n    newGrid[rowIdx] = newRow\r\n    setGrid(newGrid)\r\n  }\r\n  return (\r\n    <td className={colors(`${rowIdx}-${cellIdx}`)}>\r\n      <input\r\n        className={colors(`${rowIdx}-${cellIdx}`)}\r\n        value={cellData}\r\n        onChange={changeHandler}\r\n        disabled={false}\r\n        ref={inputEl}\r\n      />\r\n    </td>\r\n  )\r\n}\r\n\r\nTableData.propTypes = {\r\n  cellIdx: PropTypes.number.isRequired,\r\n  rowIdx: PropTypes.number.isRequired,\r\n  colors: PropTypes.func.isRequired,\r\n  grid: PropTypes.array.isRequired,\r\n  setGrid: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TableData\r\n","import React, { useEffect } from 'react'\r\nimport TableData from './TableData'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Table = ({ grid, setGrid, boardCopy }) => {\r\n  useEffect(() => {\r\n    setGrid(grid)\r\n  }, [grid, setGrid])\r\n  //Set Colors Dynamically depending on id/grid coordinates\r\n  const colors = (id) => {\r\n    const idArr = id.split('-')\r\n    ///preserving in separate sections for now in case I need more granular control\r\n    if (idArr[0] < 3 && idArr[1] < 3) return 'section-1'\r\n    if (idArr[0] < 3 && idArr[1] < 6) return 'section-2'\r\n    if (idArr[0] < 3 && idArr[1] < 9) return 'section-3'\r\n    if (idArr[0] < 6 && idArr[1] < 3) return 'section-4'\r\n    if (idArr[0] < 6 && idArr[1] < 6) return 'section-5'\r\n    if (idArr[0] < 6 && idArr[1] < 9) return 'section-6'\r\n    if (idArr[0] < 9 && idArr[1] < 3) return 'section-7'\r\n    if (idArr[0] < 9 && idArr[1] < 6) return 'section-8'\r\n    if (idArr[0] < 9 && idArr[1] < 9) return 'section-9'\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <table className='tg table-wrap'>\r\n        <tbody>\r\n          {grid.map((row, rowIdx) => {\r\n            //2d array so needs to be mapped twice\r\n            //get indexes from both maps to set the cell key/id number as its grid coordinates\r\n            return (\r\n              <tr key={rowIdx}>\r\n                {row.map((cell, cellIdx) => {\r\n                  return (\r\n                    <TableData\r\n                      key={`${rowIdx}-${cellIdx}`}\r\n                      cellData={cell}\r\n                      cellIdx={cellIdx}\r\n                      rowIdx={rowIdx}\r\n                      colors={colors}\r\n                      setGrid={setGrid}\r\n                      grid={grid}\r\n                      boardCopy={boardCopy}\r\n                    />\r\n                  )\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\nTable.propTypes = {\r\n  grid: PropTypes.array.isRequired,\r\n  setGrid: PropTypes.func.isRequired,\r\n}\r\nexport default Table\r\n","export const sudokuBoards = [\r\n  '864371259325849761971265843436192587198657432257483916689734125713528694542916378',\r\n  '346179258187523964529648371965832417472916835813754629798261543631485792254397186',\r\n  '695127384138459672724836915851264739273981546946573821317692458489715263562348197',\r\n  '497258316186439725253716498629381547375964182841572639962145873718623954534897261',\r\n  '465912378189473562327568149738645291954821637216397854573284916642159783891736425',\r\n  '194685237382974516657213489823491675541768923769352841215839764436527198978146352',\r\n  '289765431317924856645138729763891542521473968894652173432519687956387214178246395',\r\n  '894231657762495183351876942583624719219387564647159328128763495976542831435918276',\r\n  '563472198219386754847195623472638519951247386638519472795864231324951867186723945',\r\n  '163725948584693271729184365946358127371462589852917634498231756637549812215876493',\r\n  '974183652651274389283596714129835476746912538835647921568329147317468295492751863',\r\n  '431567289729481653865329174986243517257198346143756892612975438374812965598634721',\r\n  '254367891893215674716984253532698147178432569649571328421753986365849712987126435',\r\n  '958274163123698754746153928674315289532789416819462375285941637397526841461837592',\r\n  '865379412924581376713642895397164528482795631156823947541236789679418253238957164',\r\n  '865714329917362845234598761142657983783941256596283174358176492429835617671429538',\r\n  '268495317194673852735128964872549631651387249943216785326951478589764123417832596',\r\n  '947812563583764192261935478156349287879621354324587619698253741712496835435178926',\r\n  '652483917978162435314975628825736149791824563436519872269348751547291386183657294',\r\n  '712984365346751829589263471624179538853642917197538642978316254461825793235497186',\r\n  '967254318184379562253186947691748235835621794742593681376415829428967153519832476',\r\n  '251479638948316752637258194365124879712983465894567213423691587179845326586732941',\r\n  '256734198891265374347198652514683729728519436963427581135942867689371245472856913',\r\n  '964532178187694235235817964629451783573986412841273596416728359352169847798345621',\r\n  '142569873385217946967438251536871429219654387478923165893746512621385794754192638',\r\n];\r\n","//ALL GRIDS AND ARRAYS HERE ARE FOR TESTING PURPOSES\r\n// eslint-disable-next-line\r\nlet validSection = [8, 9, 5, 7, 4, 2, 1, 3, 6]\r\n// eslint-disable-next-line\r\nlet invalidSection = [8, 9, 5, 7, 4, 2, 1, 3, 1]\r\n// eslint-disable-next-line\r\nlet invalidSection2 = ['', 9, 5, '', 4, 2, 1, 3, 1]\r\n// eslint-disable-next-line\r\nlet puzzle = [\r\n  [8, 9, 5, 7, 4, 2, 1, 3, 6],\r\n  [2, 7, 1, 9, 6, 3, 4, 8, 5],\r\n  [4, 6, 3, 5, 8, 1, 7, 9, 2],\r\n\r\n  [9, 3, 4, 6, 1, 7, 2, 5, 8],\r\n  [5, 1, 7, 2, 3, 8, 9, 6, 4],\r\n  [6, 8, 2, 4, 5, 9, 3, 7, 1],\r\n\r\n  [1, 5, 9, 8, 7, 4, 6, 2, 3],\r\n  [7, 4, 6, 3, 2, 5, 8, 1, 9],\r\n  [3, 2, 8, 1, 9, 6, 5, 4, 7],\r\n]\r\n// eslint-disable-next-line\r\nlet puzzleClone = [\r\n  ['', 2, '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', '', '', '', '', '', '', '', ''],\r\n  ['', 1, '', '', '', '', '', '', ''],\r\n]\r\n// eslint-disable-next-line\r\nlet invalidPuzzle = [\r\n  [8, 9, 5, 7, 4, 2, 1, 3, 6],\r\n  [8, 7, 1, 9, 6, 3, 4, 8, 5],\r\n  [4, 6, 3, 5, 8, 1, 7, 9, 2],\r\n  [9, 3, 4, 6, 1, 7, 2, 5, 8],\r\n  [5, 1, 7, 2, 3, 8, 9, 6, 4],\r\n  [6, 8, 2, 4, 5, 9, 3, 7, 1],\r\n  [1, 5, 9, 8, 7, 4, 6, 2, 3],\r\n  [7, 4, 6, 3, 2, 5, 8, 1, 9],\r\n  [3, 2, 8, 1, 9, 6, 5, 4, 7],\r\n]\r\n//GETS SINGLE ROW TO BE EVALUATED\r\nexport const getRow = (grid, rowIdx) => {\r\n  return grid[rowIdx]\r\n}\r\n//GETS SINGLE COLUMN TO BE EVALUATED\r\nconst getColumn = (grid, columnIdx) => {\r\n  let column = []\r\n  for (let i = 0; i < grid.length; i++) {\r\n    let currRow = grid[i]\r\n\r\n    let numFromCol = currRow[columnIdx]\r\n\r\n    column.push(numFromCol)\r\n  }\r\n  return column.flat()\r\n}\r\n//GETS A SINGLE SECTION FOR VALIDATION\r\nexport const getSection = (grid, column, rowX) => {\r\n  //we want to get slices of three indexes of three rows to make a section that is 3x3\r\n\r\n  let section = []\r\n  let yIdx = 0\r\n  let startRow = 0\r\n  //check coord for where to start slicing on column\r\n  if (column === 0) yIdx = 0\r\n  if (column === 1) yIdx = 3\r\n  if (column === 2) yIdx = 6\r\n  //check the row for the same\r\n  if (rowX === 0) startRow = 0\r\n  if (rowX === 1) startRow = 3\r\n  if (rowX === 2) startRow = 6\r\n  // This for loop adds 3 to i  so that the if statements above art\r\n  //\r\n  for (let i = startRow; i < startRow + 3; i++) {\r\n    let currRow = grid[i]\r\n\r\n    //This next two lines is mch easire to understand than what I have below but russell didn't like slice?\r\n    // let currentSliceOfRow = currRow.slice(yIdx, yIdx +3)\r\n    //section.push(currentSliceOfRow)\r\n    section.push(currRow[yIdx], currRow[yIdx + 1], currRow[yIdx + 2])\r\n  }\r\n  return section\r\n}\r\n//TO CHECK IF SECTION CONTAINS AlL NUMBERS\r\nexport const includes1to9 = (subSection) => {\r\n  for (let i = 1; i < 9; i++) {\r\n    if (!subSection.includes(i)) return false\r\n  }\r\n  return true\r\n}\r\n//CHECK IF A SECTION CONTAINS MORE THAN ONE OF A NUMBER\r\nexport const noDupeSection = (subSection) => {\r\n  let hash = {}\r\n  for (let item of subSection) {\r\n    if (item !== '') {\r\n      if (hash[item] === undefined) {\r\n        hash[item] = 1\r\n      } else {\r\n        hash[item] += 1\r\n      }\r\n      for (let key in hash) {\r\n        if (hash[key] > 1) {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return true\r\n}\r\n//CHECKS FOR DUPLICATES ON THE BOARD\r\nexport const boardDuplicateChecker = (grid) => {\r\n  for (let i = 0; i < grid.length; i++) {\r\n    if (!noDupeSection(getRow(grid, i))) return false\r\n    if (!noDupeSection(getColumn(grid, i))) return false\r\n  }\r\n  //Double for loop to get through 1 - 3 on both input coords\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let currSection = getSection(grid, i, j)\r\n      if (!noDupeSection(currSection)) {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n  return true\r\n}\r\n//CHECK WHOLE BOARD IS VALID\r\nexport const sudokuChecker = (grid) => {\r\n  for (let i = 0; i < grid.length; i++) {\r\n    let currCol = getColumn(grid, i)\r\n\r\n    if (!includes1to9(currCol)) {\r\n      return false\r\n    }\r\n\r\n    let currRow = getRow(grid, i)\r\n    if (!includes1to9(currRow)) {\r\n      return false\r\n    }\r\n  }\r\n  //Double for loop to get through 1 - 3 on both input coords\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let currSection = getSection(grid, i, j)\r\n      if (!includes1to9(currSection)) {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n  return true\r\n}\r\n//CHECK EQUIVALENCY OF TWO BOARDS\r\nexport const isSame = (grid1, grid2) => {\r\n  //Double For Loop check each entry against the other\r\n  for (let i = 0; i < grid1.length; i++) {\r\n    let currRow = grid1[i]\r\n    let currRow2 = grid2[i]\r\n    for (let j = 0; j < grid1.length; j++) {\r\n      if (currRow[j] !== currRow2[j]) {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n//create a deep copy of a board\r\nexport const boardCopier = (board) => {\r\n  let copy = []\r\n  for (let i = 0; i < board.length; i++) {\r\n    let row = board[i]\r\n    let newRow = []\r\n    for (let j = 0; j < board.length; j++) {\r\n      newRow.push(row[j])\r\n    }\r\n    copy.push(newRow)\r\n  }\r\n  return copy\r\n}\r\n\r\n//console.log(boardDuplicateChecker(puzzleClone));\r\n","import React from 'react'\r\nimport { sudokuBoards } from './sudokuBoards.js'\r\nimport { boardCopier } from './gridCheckerLogic'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst BoardMaker = ({ setGrid, showButtons, setShowButtons, setBoardCopy }) => {\r\n  //FUNCTION TO TAKE IN STRINGS OF VALID SUDOKU BOARDS AND MAKE GRIDS\r\n  let sudoStringHandler = (sudo) => {\r\n    let random = Math.floor(Math.random() * sudokuBoards.length)\r\n    let sudokuString = sudokuBoards[random]\r\n    let board = []\r\n    for (let i = 0; i < 81; i += 9) {\r\n      let row = sudokuString.slice(i, i + 9).split('')\r\n      board.push(row.map((num) => Number(num)))\r\n    }\r\n    return board\r\n  }\r\n\r\n  //FUNCTION TO GENERATE NUMBERS BASED ON DIFFICULTY\r\n  const difficultySetting = (level) => {\r\n    if (level === 'easy') level = 36\r\n    if (level === 'medium') level = Math.floor(Math.random() * (32 - 25)) + 25\r\n    if (level === 'hard') level = Math.floor(Math.random() * (23 - 18)) + 18\r\n    if (level === 'full') level = 80\r\n    return level\r\n  }\r\n\r\n  //FUNCTION TO EMPTY A NUMBER OF INDICES ACCORDING TO DIFFICULTY LEVEL\r\n  let boardMaker = (board, level) => {\r\n    const coordsGen = () => {\r\n      let x = Math.floor(Math.random() * 9)\r\n      let y = Math.floor(Math.random() * 9)\r\n      return [x, y]\r\n    }\r\n\r\n    let removeNum = 81 - level - 1\r\n\r\n    //IF SPOT CONTAINS NUMBER RECPLACE THAT INDEX WITH EMPTY STRING\r\n    //This is where I should create a history board that can use to solve the whole puzzle or generate hints\r\n    let i = removeNum\r\n    while (i >= 0) {\r\n      let [x, y] = coordsGen()\r\n      if (board[x][y] === '') {\r\n        continue\r\n      }\r\n      board[x][y] = ''\r\n      i--\r\n    }\r\n    return board\r\n  }\r\n\r\n  //HANDLES ALL THREE DIFFICULTY BUTTONS\r\n  const clickHandler = (e) => {\r\n    let difficulty = difficultySetting(e.target.value)\r\n    let solvedBoard = sudoStringHandler()\r\n    let finalBoard = boardMaker(solvedBoard, difficulty)\r\n    let startingBoardCopy = boardCopier(finalBoard)\r\n    setBoardCopy(startingBoardCopy)\r\n    setGrid(finalBoard)\r\n    setShowButtons(!showButtons)\r\n  }\r\n\r\n  return (\r\n    <div align='center'>\r\n      <button\r\n        className='semi-trans'\r\n        value='easy'\r\n        href='!#'\r\n        onClick={clickHandler}>\r\n        Easy\r\n      </button>\r\n      <button\r\n        className='semi-trans'\r\n        value='medium'\r\n        href='!#'\r\n        onClick={clickHandler}>\r\n        Medium\r\n      </button>\r\n      <button\r\n        className='semi-trans'\r\n        value='hard'\r\n        href='!#'\r\n        onClick={clickHandler}>\r\n        Hard\r\n      </button>\r\n      <button\r\n        className='semi-trans'\r\n        value='full'\r\n        href='!#'\r\n        onClick={clickHandler}>\r\n        Full Board - 1\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nBoardMaker.propTypes = {\r\n  setGrid: PropTypes.func.isRequired,\r\n  showButtons: PropTypes.bool.isRequired,\r\n  setShowButtons: PropTypes.func.isRequired,\r\n}\r\nexport default BoardMaker\r\n","import React, { useState, useEffect } from 'react'\nimport Table from './Table'\n// import GridChecker from './GridChecker';\nimport BoardMaker from './BoardMaker'\nimport './App.css'\nimport { sudokuChecker } from './gridCheckerLogic'\n// eslint-disable-next-line\nconst defaultGrid = [\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', '', ''],\n]\n//eslint-disable-next-line\nlet puzzle = [\n  [8, 9, 5, 7, 4, 2, 1, 3, 6],\n  [2, 7, 1, 9, 6, 3, 4, 8, 5],\n  [4, 6, 3, 5, 8, 1, 7, 9, 2],\n  [9, 3, 4, 6, 1, 7, 2, 5, 8],\n  [5, 1, 7, 2, 3, 8, 9, 6, 4],\n  [6, 8, 2, 4, 5, 9, 3, 7, 1],\n  [1, 5, 9, 8, 7, 4, 6, 2, 3],\n  [7, 4, 6, 3, 2, 5, 8, 1, 9],\n  [3, 2, 8, 1, 9, 6, 5, 4, 7],\n]\n\nfunction App() {\n  const [grid, setGrid] = useState(defaultGrid)\n  const [validGrid, setValidGrid] = useState(false)\n  const [showResults, setShowResults] = useState(null)\n  const [showButtons, setShowButtons] = useState(true)\n  const [boardCopy, setBoardCopy] = useState(null)\n  useEffect(() => {\n    setValidGrid(sudokuChecker(grid))\n  }, [grid])\n\n  const checkBoardClickHandler = () => {\n    setShowResults(!showResults)\n    if (!validGrid) {\n      setTimeout(() => {\n        setShowResults(false)\n      }, 2500)\n    }\n  }\n  const newBoardClickHandler = () => {\n    setGrid(defaultGrid)\n    setShowButtons(!showButtons)\n    setShowResults(false)\n    setBoardCopy(null)\n  }\n  return (\n    <div className='app'>\n      {!showResults && <h3 className='app-header'>Sudoku?</h3>}{' '}\n      {showResults && validGrid && <h4 className='results'>Valid Grid!</h4>}\n      {showResults && !validGrid && <h4 className='results'>Failure!</h4>}\n      <Table grid={grid} setGrid={setGrid} boardCopy={boardCopy} />\n      {showButtons ? (\n        <BoardMaker\n          setGrid={setGrid}\n          showButtons={showButtons}\n          setShowButtons={setShowButtons}\n          setBoardCopy={setBoardCopy}\n        />\n      ) : (\n        <>\n          <div align='center'>\n            <button className='semi-trans' onClick={checkBoardClickHandler}>\n              Check Board\n            </button>\n            <button className='semi-trans' onClick={newBoardClickHandler}>\n              New Game\n            </button>\n          </div>\n        </>\n      )}\n      <img src='src\\assets\\sudoku-logo.png' alt='' />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}